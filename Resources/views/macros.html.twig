{% macro calendar_event_view_template(id) %}
<script type="text/html" id="{{ id }}">
    {% import 'OroUIBundle::macros.html.twig' as UI %}
    <div class="widget-content">
        <div class="row-fluid form-horizontal">
            <div class="responsive-block">
                {{ UI.renderHtmlProperty('oro.calendar.calendarevent.title.label'|trans, '<%= formatter.string(title) %>') }}
                {{ UI.renderHtmlProperty('oro.calendar.calendarevent.description.label'|trans, '<%= formatter.text(description) %>') }}
                {{ UI.renderHtmlProperty('oro.calendar.calendarevent.start.label'|trans, '<%= formatter.dateTime(start) %>') }}
                {{ UI.renderHtmlProperty('oro.calendar.calendarevent.end.label'|trans, '<%= formatter.dateTime(end) %>') }}
                {{ UI.renderHtmlProperty('oro.calendar.calendarevent.all_day.label'|trans, '<%= formatter.bool(allDay) %>') }}
            </div>
            <div class="widget-actions form-actions" style="display: none;">
                <% if (id != null && removable) { %>
                {{
                    UI.deleteButton({
                        'aCss': 'no-hash',
                        'id': 'btn-remove-calendarevent',
                        'dataMessage': 'Are you sure you want to delete this event?',
                        'title': 'Delete event',
                        'label': 'Delete',
                        'data': {'action-name': 'delete'}
                    })
                }}
                <% } %>
                <% if (id == null || (id != null && editable)) { %>
                <button class="btn" type="button" data-action-name="edit">{{ 'oro.ui.edit'|trans }}</button>
                <% } %>
            </div>
        </div>
    </div>
</script>
{% endmacro %}

{% macro calendar_event_form_template(id, form) %}
<script type="text/html" id="{{ id }}">
    {% import 'OroUIBundle::macros.html.twig' as UI %}
    {% set data = [
            form_row(form.title),
            form_row(form.description),
            form_row(form.start),
            form_row(form.end),
            form_row(form.allDay),
            form_row(form.backgroundColor),
            form_row(form.reminders)
        ]
    %}
    <div class="widget-content">
        <div class="alert alert-error" style="display: none;"></div>
        <form id="{{ form.vars.name }}" action="#">
            <fieldset class="form-horizontal">
                {{ UI.scrollSubblock(null, data, true, false)|replace({'<script': '<% print("<sc" + "ript") %>', '</script>': '<% print("</sc" + "ript>") %>'})|raw }}
                <div class="widget-actions form-actions" style="display: none;">
                    <% if (id != null && removable) { %>
                    {{
                        UI.deleteButton({
                            'aCss': 'no-hash',
                            'id': 'btn-remove-calendarevent',
                            'dataMessage': 'Are you sure you want to delete this event?',
                            'title': 'Delete event',
                            'label': 'Delete',
                            'data': {'action-name': 'delete'}
                        })
                    }}
                    <% } %>
                    <button class="btn" type="reset">{{ 'Cancel'|trans }}</button>
                    <% if (id == null || (id != null && editable)) { %>
                    <button class="btn btn-primary" type="submit">{{ 'Save'|trans }}</button>
                    <% } %>
                </div>
            </fieldset>
        </form>
        {{ oro_form_js_validation(form)|replace({'<script': '<% print("<sc" + "ript") %>', '</script>': '<% print("</sc" + "ript>") %>'})|raw }}
    </div>
</script>
{% endmacro %}

{% macro renderCalendar(containerSelector, entity, startDate, endDate, calendar, eventsOptions, connectionsOptions, callbackMacro) %}
<script type="text/javascript">
    require(['jquery', 'underscore', 'orocalendar/js/calendar', 'orocalendar/js/calendar/event/collection',
        'orocalendar/js/calendar/connection/collection', 'orolocale/js/locale-settings', 'oroui/js/mediator', 'orotranslation/js/translator'],
    function($, _, Calendar, EventCollection, ConnectionCollection, localeSettings, mediator, __){
        {% set options = {
            el: containerSelector,
            calendar: entity.id,
            calendarOptions: calendar,
            eventsItemsJson: render(path('oro_api_get_calendarevents', {calendar: entity.id, start: startDate|date('c'), end: endDate|date('c'), subordinate: true})),
            connectionsItemsJson: render(path('oro_api_get_calendar_connections', {id: entity.id})),
            date: 'now'|date('c'),
            eventsOptions: eventsOptions,
            connectionsOptions: connectionsOptions,
            colorManagerOptions: {
                colors: oro_config_value('oro_calendar.calendar_colors')
            }
        } %}

        var options = {{ options|json_encode|raw }};

        function prepareOptions (options) {
            // prepare data for collections
            options.collection = new EventCollection(JSON.parse(options.eventsItemsJson));
            options.connectionsOptions.collection = new ConnectionCollection(JSON.parse(options.connectionsItemsJson));
            options.eventsOptions.subordinate = true;
            options.eventsOptions.date = options.date;
            options.eventsOptions.header = {
                left: options.eventsOptions.leftHeader || '',
                center: options.eventsOptions.centerHeader || '',
                right: options.eventsOptions.rightHeader || '',
                ignoreTimezone: false,
                allDayDefault: false
            }
            if (!options.eventsOptions.defaultView) {
                options.eventsOptions.defaultView = 'month';
            }
            options.eventsOptions.allDayText = __('oro.calendar.control.all_day');
            options.eventsOptions.buttonText = {
                today: __('oro.calendar.control.today'),
                month: __('oro.calendar.control.month'),
                week: __('oro.calendar.control.week'),
                day: __('oro.calendar.control.day')
            };

            options.eventsOptions.firstDay = localeSettings.getCalendarFirstDayOfWeek() - 1;
            options.eventsOptions.monthNames = localeSettings.getCalendarMonthNames('wide', true);
            options.eventsOptions.monthNamesShort = localeSettings.getCalendarMonthNames('abbreviated', true);
            options.eventsOptions.dayNames = localeSettings.getCalendarDayOfWeekNames('wide', true);
            options.eventsOptions.dayNamesShort = localeSettings.getCalendarDayOfWeekNames('abbreviated', true);

            _.extend(options.eventsOptions, options.calendarOptions);

            var dateFormat = localeSettings.getVendorDateTimeFormat('fullcalendar', 'date', 'MMM d, yyyy');
            var timeFormat = localeSettings.getVendorDateTimeFormat('fullcalendar', 'time', 'h:mm TT');
            // @TODO Get date format without year
            // prepare FullCalendar specific date/time formats
            var isDateFormatStartedWithDay = dateFormat.indexOf('d') === 0;
            var weekFormat = isDateFormatStartedWithDay
                    ? 'd[ MMMM][ yyyy]{ \'&#8212;\' d MMMM yyyy}'
                    : 'MMMM d[ yyyy]{ \'&#8212;\'[ MMMM] d yyyy}';

            options.eventsOptions.titleFormat = {
                month: 'MMMM yyyy',
                week: weekFormat,
                day: 'dddd, ' + dateFormat
            };
            options.eventsOptions.columnFormat = {
                month: 'ddd',
                week: 'ddd ' + dateFormat,
                day: 'dddd ' + dateFormat
            };
            options.eventsOptions.timeFormat = {
                '': timeFormat,
                agenda: timeFormat + '{ - ' + timeFormat + '}'
            };
            options.eventsOptions.axisFormat = timeFormat;

            delete options.eventsItemsJson;
            delete options.connectionsItemsJson;
            delete options.calendarOptions;
            delete options.date;
            delete options.eventsOptions.centerHeader;
            delete options.eventsOptions.leftHeader;
            delete options.eventsOptions.rightHeader;
        }

        prepareOptions(options);

        $(function() {
            var calendar = new Calendar(options);
            calendar.render();
            {% if eventsOptions.renderCompleteCallback is defined %}
                var renderCompleteCallback = {{ eventsOptions.renderCompleteCallback|raw }};
                renderCompleteCallback(calendar);
            {% endif %}
            calendar.$el.data('calendar', calendar);
            mediator.on('page:beforeChange', _.bind(calendar.dispose, calendar));
        });
    });
</script>
{% endmacro %}
